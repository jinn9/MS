server:
  port: 8072

spring:
  application:
    name: "gatewayserver"
  cloud:
    gateway:
      discovery: # connect to eureka server and locate all the microservices
        locator:
          enabled: false
          lowerCaseServiceId: true
      httpclient:
        connect-timeout: 1000
        response-timeout: 10s
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
  security:
    oauth2:
      resourceserver:
        jwt:
          # downloads the certificate from the auth server on start-up
          jwk-set-uri: "http://localhost:7080/realms/master/protocol/openid-connect/certs"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    gateway:
      access: unrestricted
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "gatewayserver"
    description: "Gateway Server"
    version: "1.0.0"

logging:
  level:
    com:
      github:
        jinn9:
          order: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10 # how many requests to monitor before switching from closed to open state
      permittedNumberOfCallsInHalfOpenState: 2 # when in half state, use this amount of requests to decide to move to closed or open state
      failureRateThreshold: 50
      waitDurationInOpenState: 10000